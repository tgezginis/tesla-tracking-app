name: Build and Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write
  packages: write
  issues: write
  pull-requests: write

jobs:
  build:
    name: Build for ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: ubuntu-latest
            output_name: TeslaTakip
            asset_name: tesla-takip-linux
          - os: windows-latest
            output_name: TeslaTakip.exe
            asset_name: tesla-takip-windows
          - os: macos-latest
            output_name: TeslaTakip.app
            asset_name: tesla-takip-macos

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: Install dependencies (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgl1-mesa-dev xorg-dev gcc libwayland-dev libxkbcommon-dev

      - name: Install Fyne CLI
        run: go install fyne.io/tools/cmd/fyne@latest

      - name: Build, Sign, and Notarize for macOS
        if: matrix.os == 'macos-latest'
        env:
          APPLE_DEVELOPER_ID_CERT_STRING: ${{ secrets.APPLE_DEVELOPER_ID_CERT_STRING }}
          APPLE_DEVELOPER_ID_P12_BASE64: ${{ secrets.APPLE_DEVELOPER_ID_P12_BASE64 }}
          APPLE_DEVELOPER_ID_P12_PASSWORD: ${{ secrets.APPLE_DEVELOPER_ID_P12_PASSWORD }}
          APPLE_ID_USERNAME: ${{ secrets.APPLE_ID_USERNAME }}
          APPLE_ID_APP_SPECIFIC_PASSWORD: ${{ secrets.APPLE_ID_APP_SPECIFIC_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          KEYCHAIN_NAME: build.keychain
          APP_NAME: "Tesla Takip"
          APP_BUNDLE_NAME: "Tesla Takip.app"
          ZIP_FOR_NOTARIZATION_NAME: "tesla-takip-macos-for-notarization.zip"
          FINAL_RELEASE_ZIP_NAME: "tesla-takip-macos.zip"
        run: |
          # 0. Determine icon path
          icon_path="assets/icon.jpg"
          if [ ! -f "$icon_path" ]; then
            icon_path="icon.jpg" # Fallback to icon.jpg in root
          fi
          echo "Using icon at $icon_path"

          # 1. Create temporary keychain
          echo "Creating temporary keychain: $KEYCHAIN_NAME"
          security create-keychain -p "${{ github.run_id }}" "$KEYCHAIN_NAME"
          security default-keychain -s "$KEYCHAIN_NAME"
          security unlock-keychain -p "${{ github.run_id }}" "$KEYCHAIN_NAME"
          security set-keychain-settings -t 3600 -u "$KEYCHAIN_NAME"

          # 2. Import certificate from base64 secret
          echo "Importing .p12 certificate..."
          echo "${APPLE_DEVELOPER_ID_P12_BASE64}" | base64 --decode > certificate.p12
          # For P12 files with no password, some systems expect an empty string for -P
          # If APPLE_DEVELOPER_ID_P12_PASSWORD secret is set to "none" or similar, use that.
          # If it was intended to be truly empty, use ""
          P12_PASSWORD_TO_USE=""
          if [ -n "${APPLE_DEVELOPER_ID_P12_PASSWORD}" ] && [ "${APPLE_DEVELOPER_ID_P12_PASSWORD}" != "none" ]; then
            P12_PASSWORD_TO_USE="${APPLE_DEVELOPER_ID_P12_PASSWORD}"
          fi
          security import certificate.p12 -k "$KEYCHAIN_NAME" -P "$P12_PASSWORD_TO_USE" -T /usr/bin/codesign -T /usr/bin/productbuild -T /usr/bin/xcrun
          rm certificate.p12
          echo "Setting key partition list..."
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "${{ github.run_id }}" "$KEYCHAIN_NAME"
          
          # 3. Build the application using fyne package
          echo "Building application: $APP_NAME"
          fyne package --os darwin --name "$APP_NAME" --icon "$icon_path" --release --app-id com.tgezginis.teslatracking

          # Verify .app bundle creation
          if [ ! -d "$APP_BUNDLE_NAME" ]; then
            echo "Error: $APP_BUNDLE_NAME not found after 'fyne package' command."
            ls -la .
            exit 1
          fi
          echo "$APP_BUNDLE_NAME created successfully."

          # 4. Sign the application bundle with hardened runtime
          echo "Signing $APP_BUNDLE_NAME with identity: $APPLE_DEVELOPER_ID_CERT_STRING"
          # Create a basic entitlements.plist for hardened runtime
          cat > entitlements.plist <<EOF
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
              <key>com.apple.security.cs.allow-jit</key>
              <true/>
              <key>com.apple.security.cs.disable-library-validation</key>
              <true/>
          </dict>
          </plist>
          EOF
          codesign --force --deep --options runtime --entitlements entitlements.plist --sign "$APPLE_DEVELOPER_ID_CERT_STRING" "$APP_BUNDLE_NAME"
          echo "Verifying signature of $APP_BUNDLE_NAME..."
          codesign --verify --verbose "$APP_BUNDLE_NAME"
          # Optional: Assess with spctl
          # spctl --assess --type execute "$APP_BUNDLE_NAME"

          # 5. Create zip for notarization
          echo "Creating zip for notarization: $ZIP_FOR_NOTARIZATION_NAME"
          zip -r "$ZIP_FOR_NOTARIZATION_NAME" "$APP_BUNDLE_NAME"

          # 6. Notarize the application using notarytool
          echo "Submitting $ZIP_FOR_NOTARIZATION_NAME for notarization..."
          xcrun notarytool submit "$ZIP_FOR_NOTARIZATION_NAME" \
                               --apple-id "$APPLE_ID_USERNAME" \
                               --password "$APPLE_ID_APP_SPECIFIC_PASSWORD" \
                               --team-id "$APPLE_TEAM_ID" \
                               --wait
          echo "Notarization completed."

          # 7. Staple the notarization ticket to the .app bundle
          echo "Stapling notarization ticket to $APP_BUNDLE_NAME"
          xcrun stapler staple "$APP_BUNDLE_NAME"
          echo "Verifying stapler output for $APP_BUNDLE_NAME..."
          xcrun stapler validate "$APP_BUNDLE_NAME"

          # 8. Create the final release zip file (this will be uploaded as artifact)
          echo "Creating final release zip: $FINAL_RELEASE_ZIP_NAME"
          zip -r "$FINAL_RELEASE_ZIP_NAME" "$APP_BUNDLE_NAME"
          
          # 9. Clean up temporary keychain
          echo "Deleting temporary keychain $KEYCHAIN_NAME..."
          security delete-keychain "$KEYCHAIN_NAME" || echo "Failed to delete keychain, but continuing."

          echo "macOS build, sign, notarize, and staple process complete. Final archive: $FINAL_RELEASE_ZIP_NAME"

      - name: Debug - List Files (macOS)
        if: matrix.os == 'macos-latest'
        run: ls -la

      - name: Build for Windows
        if: matrix.os == 'windows-latest'
        run: |
          $iconPath = "assets\icon.jpg"
          if (-not (Test-Path $iconPath)) {
              $iconPath = "icon.jpg"
          }
          Write-Host "Using icon at $iconPath"
          
          fyne package --os windows --name "Tesla Takip" --icon $iconPath --release --app-id com.tgezginis.teslatracking
          
      - name: Debug - List Files (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          dir
          echo "Current directory: $PWD"

      - name: Build for Linux
        if: matrix.os == 'ubuntu-latest'
        run: |
          icon_path="assets/icon.jpg"
          if [ ! -f "$icon_path" ]; then
            icon_path="icon.jpg"
          fi
          echo "Using icon at $icon_path"
          
          fyne package --os linux --name "Tesla Takip" --icon "$icon_path" --release --app-id com.tgezginis.teslatracking
          
      - name: Debug - List Files (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: ls -la

      - name: Upload Windows artifact
        if: matrix.os == 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.asset_name }}
          path: "*.exe"

      - name: Upload macOS artifact
        if: matrix.os == 'macos-latest'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.asset_name }}
          path: tesla-takip-macos.zip

      - name: Upload Linux artifact
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.asset_name }}
          path: |
            Tesla*
            *.tar.gz

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Display structure of downloaded files
        run: ls -R ./artifacts

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            ./artifacts/tesla-takip-windows/*
            ./artifacts/tesla-takip-macos/*
            ./artifacts/tesla-takip-linux/*
          name: Release ${{ github.ref_name }}
          generate_release_notes: true
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 